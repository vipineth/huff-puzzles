/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(balanceOf) eq balanceOf_jump jumpi
    __FUNC_SIG(withdraw) eq withdraw_jump jumpi
    callvalue receive_jump jumpi

    receive_jump:
        caller
        0x00 mstore
        0x14 0x0c sha3
        dup1 // [hash_caller, hash_caller]
        sload // [balance, hash_caller]
        callvalue // [balance, value, hash_caller]
        add // [balance + value, hash_caller]
        swap1
        sstore
        0x00 0x00 return

    balanceOf_jump:
        0x04 calldataload 0x00 mstore
        0x14 0x00 sha3
        sload
        0x00 mstore
        0x20 0x00 return

    withdraw_jump:
        caller
        0x00 mstore
        0x14 0x0c sha3
        dup1 // [hash_caller, hash_caller]
        sload // [balance, hash_caller]
        dup1 // [balance, balance, hash_caller] 
        0x04 calldataload // [amount, balance, balance, hash_caller]
        swap1 sub
         dup1 swap2
        lt 
        revert_jump jumpi

        swap1
        sstore
        // transfer the amount to the caller
        0x00
        0x00
        0x00
        0x00
        0x04 calldataload
        caller
        gas
        call

        iszero revert_jump jumpi

        0x00 0x00 return

    revert_jump:
        0x00 0x00 revert
}
